var $5FUN9$datefns = require("date-fns");
var $5FUN9$imagetobase64 = require("image-to-base64");
var $5FUN9$qs = require("qs");
var $5FUN9$crossfetch = require("cross-fetch");
var $5FUN9$nanoid = require("nanoid");
var $5FUN9$cryptojs = require("crypto-js");

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$exportWildcard(dest, source) {
  Object.keys(source).forEach(function(key) {
    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {
      return;
    }

    Object.defineProperty(dest, key, {
      enumerable: true,
      get: function get() {
        return source[key];
      }
    });
  });

  return dest;
}
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}

$parcel$export(module.exports, "SolapiMessageService", () => $4a1cb7729cea9e6f$export$34e7265c65c60ffd);
class $3dabb91d6fa66ebe$export$bccc93b4c0d31aea {
    constructor(parameter){
        this.pfId = parameter.pfId;
        this.templateId = parameter.templateId;
        this.variables = parameter.variables;
        this.disableSms = parameter.disableSms;
        this.adFlag = parameter.adFlag;
        this.buttons = parameter.buttons;
        this.imageId = parameter.imageId;
    }
}


class $27a324d9ebfce09a$export$f69c19e57285b83a {
    constructor(parameter){
        this.to = parameter.to;
        this.from = parameter.from;
        this.text = parameter.text;
        this.imageId = parameter.imageId;
        this.type = parameter.type;
        this.subject = parameter.subject;
        this.autoTypeDetect = parameter.autoTypeDetect;
        this.country = parameter.country;
        if (parameter.kakaoOptions != undefined) this.kakaoOptions = new (0, $3dabb91d6fa66ebe$export$bccc93b4c0d31aea)(parameter.kakaoOptions);
        this.customFields = parameter.customFields;
        this.replacements = parameter.replacements;
    }
}



var $091ca2771f174553$exports = {};

$parcel$export($091ca2771f174553$exports, "InvalidDateError", () => $091ca2771f174553$export$7522646e65a7a5d1);
$parcel$export($091ca2771f174553$exports, "ApiKeyError", () => $091ca2771f174553$export$6efc4418efdbd5bb);
$parcel$export($091ca2771f174553$exports, "DefaultError", () => $091ca2771f174553$export$c73ca302efeda3b4);
$parcel$export($091ca2771f174553$exports, "MessageNotReceivedError", () => $091ca2771f174553$export$b75729dbe9bbac3a);
$parcel$export($091ca2771f174553$exports, "BadRequestError", () => $091ca2771f174553$export$6bfa95453d427b2b);
class $091ca2771f174553$export$7522646e65a7a5d1 extends Error {
    constructor(message){
        super(message);
        this.name = "InvalidDateError";
    }
}
class $091ca2771f174553$export$6efc4418efdbd5bb extends Error {
    constructor(message){
        super(message);
        this.name = "InvalidApiKeyError";
    }
}
class $091ca2771f174553$export$c73ca302efeda3b4 extends Error {
    constructor(errorCode, errorMessage){
        super(errorMessage);
        this.name = errorCode;
    }
}
class $091ca2771f174553$export$b75729dbe9bbac3a extends Error {
    constructor(errorList){
        const statusMessageCount = errorList.length;
        super(`${statusMessageCount}개의 메시지가 접수되지 못했습니다. 자세한 에러 메시지는 해당 에러 내 failedMessageList를 확인해주세요.`);
        this.name = "MessagesNotReceivedError";
        this.failedMessageList = errorList;
    }
}
class $091ca2771f174553$export$6bfa95453d427b2b extends Error {
    constructor(message){
        super(message);
        this.name = "BadRequestError";
    }
}


function $92f177611873b64e$export$5dab325bd79b963d(value) {
    return (0, $5FUN9$datefns.formatISO)($92f177611873b64e$export$2e2bcd8739ae039(value));
}
function $92f177611873b64e$export$2e2bcd8739ae039(value) {
    if (typeof value === "string") {
        value = (0, $5FUN9$datefns.parseISO)(value);
        const invalidDateText = "Invalid Date";
        if (value.toString() === invalidDateText) throw new (0, $091ca2771f174553$export$7522646e65a7a5d1)(invalidDateText);
    }
    return value;
}


const $b9b6e352f4e0d604$var$sdkVersion = "nodejs/5.2.0";
const $b9b6e352f4e0d604$export$fb47e5c0b633ea53 = {
    sdkVersion: $b9b6e352f4e0d604$var$sdkVersion,
    osPlatform: `${process.platform} | ${process.version}`
};
class $b9b6e352f4e0d604$var$DefaultMessageRequest {
    constructor(){
        this.agent = $b9b6e352f4e0d604$export$fb47e5c0b633ea53;
        this.allowDuplicates = false;
    }
}
class $b9b6e352f4e0d604$export$ad3dca884a810e33 extends $b9b6e352f4e0d604$var$DefaultMessageRequest {
    constructor(message, allowDuplicates, appId){
        super();
        this.message = message;
        if (typeof allowDuplicates === "boolean") this.allowDuplicates = allowDuplicates;
        if (appId) this.agent.appId = appId;
    }
}
class $b9b6e352f4e0d604$export$b4becc1d7edb915a extends $b9b6e352f4e0d604$var$DefaultMessageRequest {
    constructor(messages, allowDuplicates, appId){
        super();
        this.messages = messages;
        if (typeof allowDuplicates === "boolean") this.allowDuplicates = allowDuplicates;
        if (appId) this.agent.appId = appId;
    }
}
class $b9b6e352f4e0d604$export$c4f11270a1f4daf1 extends $b9b6e352f4e0d604$var$DefaultMessageRequest {
    constructor(messages, allowDuplicates, appId, scheduledDate, showMessageList){
        super();
        this.messages = messages;
        if (allowDuplicates) this.allowDuplicates = allowDuplicates;
        if (appId) this.agent.appId = appId;
        if (scheduledDate) this.scheduledDate = (0, $92f177611873b64e$export$5dab325bd79b963d)(scheduledDate);
        if (showMessageList) this.showMessageList = showMessageList;
    }
}
class $b9b6e352f4e0d604$export$6ba9c27a351bdec2 {
    constructor(messages){
        this.messages = messages;
    }
}






let $21d84e5cd31f98af$var$AuthenticateType;
(function(AuthenticateType) {
    AuthenticateType[AuthenticateType["API_KEY"] = 0] = "API_KEY";
})($21d84e5cd31f98af$var$AuthenticateType || ($21d84e5cd31f98af$var$AuthenticateType = {}));
function $21d84e5cd31f98af$export$2e2bcd8739ae039(authenticationParameter, authType = $21d84e5cd31f98af$var$AuthenticateType.API_KEY) {
    const { apiKey: apiKey , apiSecret: apiSecret  } = authenticationParameter;
    switch(authType){
        case $21d84e5cd31f98af$var$AuthenticateType.API_KEY:
        default:
            const salt = (0, $5FUN9$nanoid.customAlphabet)("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 32)();
            const date = (0, $5FUN9$datefns.formatISO)(new Date());
            const hmacData = date + salt;
            if (!apiKey || !apiSecret || apiKey === "" || apiSecret === "") throw new (0, $091ca2771f174553$export$6efc4418efdbd5bb)("Invalid API Key Error");
            const signature = (0, $5FUN9$cryptojs.HmacSHA256)(hmacData, apiSecret).toString();
            return `HMAC-SHA256 apiKey=${apiKey}, date=${date}, salt=${salt}, signature=${signature}`;
    }
}




async function $ad28ebdd1a896f5e$export$2e2bcd8739ae039(authParameter, request, data) {
    const authorizationHeaderData = (0, $21d84e5cd31f98af$export$2e2bcd8739ae039)(authParameter);
    return await (0, ($parcel$interopDefault($5FUN9$crossfetch)))(request.url, {
        headers: {
            Authorization: authorizationHeaderData,
            "Content-Type": "application/json"
        },
        body: JSON.stringify(data),
        method: request.method
    }).then(async (res)=>{
        if (res.status >= 400 && res.status < 500) {
            const errorResponse = await res.json();
            throw new (0, $091ca2771f174553$export$c73ca302efeda3b4)(errorResponse.errorCode, errorResponse.errorMessage);
        } else if (res.status >= 500) {
            const responseText = await res.text();
            throw new (0, $091ca2771f174553$export$c73ca302efeda3b4)("UnknownException", responseText);
        }
        try {
            return res.json();
        } catch (exception) {
            throw new Error(await res.text());
        }
    });
}







class $b6870838bb73d86c$export$4ec3af33017d2d92 {
    constructor(parameter){
        this.channelId = parameter.channelId;
        this.searchId = parameter.searchId;
        this.accountId = parameter.accountId;
        this.phoneNumber = parameter.phoneNumber;
        this.sharedAccountIds = parameter.sharedAccountIds;
        if (parameter.dateCreated != undefined) this.dateCreated = (0, $92f177611873b64e$export$2e2bcd8739ae039)(parameter.dateCreated);
        if (parameter.dateUpdated != undefined) this.dateUpdated = (0, $92f177611873b64e$export$2e2bcd8739ae039)(parameter.dateUpdated);
    }
}



class $96a02860c6ad123b$export$16a18a4d633c3913 {
    constructor(parameter){
        this.channelId = parameter.channelId;
        this.channelGroupId = parameter.channelGroupId;
        this.name = parameter.name;
        this.content = parameter.content;
        this.ad = parameter.ad;
        this.assignType = parameter.assignType;
        this.buttons = parameter.buttons;
        this.templateId = parameter.templateId;
        this.header = parameter.header;
        this.item = parameter.item;
        this.highlight = parameter.highlight;
        this.securityFlag = parameter.securityFlag;
        this.isHidden = parameter.isHidden;
        this.messageType = parameter.messageType;
        this.emphasizeType = parameter.emphasizeType;
        this.extra = parameter.extra;
        this.emphasizeTitle = parameter.emphasizeTitle;
        this.emphasizeSubtitle = parameter.emphasizeSubtitle;
        this.imageId = parameter.imageId;
        this.quickReplies = parameter.quickReplies;
        this.comments = parameter.comments;
        this.commentable = parameter.commentable;
        this.code = parameter.code;
        this.status = parameter.status;
        if ("dateCreated" in parameter) this.dateCreated = (0, $92f177611873b64e$export$2e2bcd8739ae039)(parameter.dateCreated);
        if ("dateUpdated" in parameter) this.dateUpdated = (0, $92f177611873b64e$export$2e2bcd8739ae039)(parameter.dateUpdated);
    }
}




class $8533ad40ed88286b$export$91fde5f4988e5a2 {
    constructor(parameter){
        this.channelId = parameter.channelId;
        this.isHidden = parameter.isHidden;
        if (parameter.name != undefined) {
            if (typeof parameter.name == "string") this.name = {
                like: parameter.name
            };
            else if (typeof parameter.name == "object") this.name = parameter.name;
        }
        this.startKey = parameter.startKey;
        this.status = parameter.status;
        this.limit = parameter.limit;
        if (parameter.startDate != undefined) this.dateCreated = Object.assign(this.dateCreated ?? {}, {
            gte: (0, $92f177611873b64e$export$5dab325bd79b963d)(parameter.startDate)
        });
        if (parameter.endDate != undefined) this.dateCreated = Object.assign(this.dateCreated ?? {}, {
            lte: (0, $92f177611873b64e$export$5dab325bd79b963d)(parameter.endDate)
        });
    }
}



class $7403f26b0f86516f$export$28223677cbfc90e7 {
    constructor(parameter){
        this.channelId = parameter.channelId;
        this.searchId = parameter.searchId;
        this.phoneNumber = parameter.phoneNumber;
        this.categoryCode = parameter.categoryCode;
        this.startKey = parameter.startKey;
        this.limit = parameter.limit;
        this.isMine = parameter.isMine;
        if (parameter.startDate != undefined) this.dateCreated = Object.assign(this.dateCreated ?? {}, {
            gte: (0, $92f177611873b64e$export$5dab325bd79b963d)(parameter.startDate)
        });
        if (parameter.endDate != undefined) this.dateCreated = Object.assign(this.dateCreated ?? {}, {
            lte: (0, $92f177611873b64e$export$5dab325bd79b963d)(parameter.endDate)
        });
    }
}



class $f6c35c8294c692a6$export$7d6fa05e85a55793 {
    constructor(parameter){
        if (parameter.groupId) {
            this.criteria = "groupId";
            this.cond = "eq";
            this.value = parameter.groupId;
        }
        this.startKey = parameter.startKey;
        this.limit = parameter.limit;
        if (parameter.startDate) this.startDate = (0, $92f177611873b64e$export$5dab325bd79b963d)(parameter.startDate);
        if (parameter.endDate) this.endDate = (0, $92f177611873b64e$export$5dab325bd79b963d)(parameter.endDate);
    }
}



class $3ec13590852c9697$export$a03fd6f891b485aa {
    type = "DENIAL";
    constructor(parameter){
        this.type = "DENIAL";
        this.senderNumber = parameter.senderNumber;
        this.startKey = parameter.startKey;
        this.limit = parameter.limit;
        if (parameter.startDate != undefined) this.dateCreated = Object.assign(this.dateCreated ?? {}, {
            gte: (0, $92f177611873b64e$export$5dab325bd79b963d)(parameter.startDate)
        });
        if (parameter.endDate != undefined) this.dateCreated = Object.assign(this.dateCreated ?? {}, {
            lte: (0, $92f177611873b64e$export$5dab325bd79b963d)(parameter.endDate)
        });
    }
}


class $084b4157301e052b$export$e63e46a11fc5d3c {
    constructor(parameter){
        this.blockGroupId = parameter.blockGroupId;
        this.useAll = parameter.useAll;
        this.senderNumber = parameter.senderNumber;
        if (parameter.name != undefined) {
            if (typeof parameter.name == "string") this.name = {
                like: parameter.name
            };
            else this.name = parameter.name;
        }
        this.status = parameter.status;
        this.startKey = parameter.startKey;
        this.limit = parameter.limit;
    }
}


class $5f21752666d363fb$export$df706d57151d1b78 {
    constructor(parameter){
        this.blockNumberId = parameter.blockNumberId;
        this.phoneNumber = parameter.phoneNumber;
        this.blockGroupId = parameter.blockGroupId;
        if (parameter.memo != undefined) {
            if (typeof parameter.memo == "string") this.memo = {
                like: parameter.memo
            };
            else this.memo = parameter.memo;
        }
        this.startKey = parameter.startKey;
        this.limit = parameter.limit;
    }
}



class $6aab6be99076a59a$export$18a889443adf01a3 {
    dateType = "CREATED";
    constructor(parameter){
        this.startKey = parameter.startKey;
        this.limit = parameter.limit;
        if (parameter.dateType) this.dateType = parameter.dateType;
        if (parameter.startDate) this.startDate = (0, $92f177611873b64e$export$5dab325bd79b963d)(parameter.startDate);
        if (parameter.endDate) this.endDate = (0, $92f177611873b64e$export$5dab325bd79b963d)(parameter.endDate);
        this.messageId = parameter.messageId;
        this.messageIds = parameter.messageIds;
        this.groupId = parameter.groupId;
        this.to = parameter.to;
        this.from = parameter.from;
        this.type = parameter.type;
        this.statusCode = parameter.statusCode;
    }
}



class $4a43a7da4ef4b972$export$bc0a97822f19395c {
    constructor(parameter){
        if (parameter.startDate) this.startDate = (0, $92f177611873b64e$export$5dab325bd79b963d)(parameter.startDate);
        if (parameter.endDate) this.endDate = (0, $92f177611873b64e$export$5dab325bd79b963d)(parameter.endDate);
        this.masterAccountId = parameter.masterAccountId;
    }
}



class $4a1cb7729cea9e6f$export$34e7265c65c60ffd {
    baseUrl = "https://api.solapi.com";
    constructor(apiKey, apiSecret){
        this.authInfo = {
            apiKey: apiKey,
            apiSecret: apiSecret
        };
    }
    /**
   * 메시지 발송 기능, sendMany 함수에서 조금 더 개선된 오류 표시 기능등을 제공합니다.
   * 한번의 요청으로 최대 10,000건까지 발송할 수 있습니다.
   * @param messages 발송 요청할 메시지 파라미터(문자, 알림톡 등)
   * @param requestConfigParameter request시 필요한 파라미터 오브젝트
   * @throws MessageNotReceivedError
   */ async send(messages, requestConfigParameter) {
        const payload = [];
        if (Array.isArray(messages)) messages.forEach((value)=>{
            payload.push(new (0, $27a324d9ebfce09a$export$f69c19e57285b83a)(value));
        });
        else if (!Array.isArray(messages)) payload.push(new (0, $27a324d9ebfce09a$export$f69c19e57285b83a)(messages));
        else throw new (0, $091ca2771f174553$export$6bfa95453d427b2b)("잘못된 값이 입력되었습니다.");
        if (payload.length === 0) throw new (0, $091ca2771f174553$export$6bfa95453d427b2b)("데이터가 반드시 1건 이상 기입되어 있어야 합니다.");
        const parameter = new (0, $b9b6e352f4e0d604$export$c4f11270a1f4daf1)(payload, requestConfigParameter?.allowDuplicates, requestConfigParameter?.appId, requestConfigParameter?.scheduledDate, requestConfigParameter?.showMessageList);
        const requestConfig = {
            method: "POST",
            url: `${this.baseUrl}/messages/v4/send-many/detail`
        };
        return (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig, parameter).then((res)=>{
            const count = res.groupInfo.count;
            if (res.failedMessageList.length > 0 && count.total === count.registeredFailed) throw new (0, $091ca2771f174553$export$b75729dbe9bbac3a)(res.failedMessageList);
            return res;
        });
    }
    /**
   * 단일 메시지 발송 기능
   * @param message 메시지(문자, 알림톡 등)
   * @param appId appstore용 app id
   */ async sendOne(message, appId) {
        const parameter = new (0, $b9b6e352f4e0d604$export$ad3dca884a810e33)(message, false, appId);
        const requestConfig = {
            method: "POST",
            url: `${this.baseUrl}/messages/v4/send`
        };
        return (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig, parameter);
    }
    /**
   * 단일 메시지 예약 발송 기능
   * @param message 메시지(문자, 알림톡 등)
   * @param scheduledDate 예약일시
   */ async sendOneFuture(message, scheduledDate) {
        const groupId = await this.createGroup();
        await this.addMessagesToGroup(groupId, [
            message
        ]);
        scheduledDate = (0, $92f177611873b64e$export$2e2bcd8739ae039)(scheduledDate);
        return this.reserveGroup(groupId, scheduledDate);
    }
    /**
   * @deprecated 이 기능은 더이상 사용되지 않습니다. send 메소드를 이용하세요!
   * 여러 메시지 즉시 발송 기능
   * 한번 요청으로 최대 10,000건의 메시지를 추가할 수 있습니다.
   * @param messages 여러 메시지(문자, 알림톡 등)
   * @param allowDuplicates 중복 수신번호 허용
   * @param appId appstore용 app id
   */ async sendMany(messages, allowDuplicates = false, appId) {
        const parameter = new (0, $b9b6e352f4e0d604$export$b4becc1d7edb915a)(messages, allowDuplicates, appId);
        const requestConfig = {
            method: "POST",
            url: `${this.baseUrl}/messages/v4/send-many`
        };
        return (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig, parameter);
    }
    /**
   * @deprecated 이 기능은 더이상 사용되지 않습니다. send 메소드를 이용하세요!
   * 여러 메시지 예약 발송 기능
   * 한번 요청으로 최대 10,000건의 메시지를 추가할 수 있습니다.
   * @param messages 여러 메시지(문자, 알림톡 등)
   * @param scheduledDate 예약 발송 일자
   * @param allowDuplicates 중복 수신번호 허용
   * @param appId appstore용 app id
   */ async sendManyFuture(messages, scheduledDate, allowDuplicates = false, appId) {
        const groupId = await this.createGroup(allowDuplicates, appId);
        await this.addMessagesToGroup(groupId, messages);
        scheduledDate = (0, $92f177611873b64e$export$2e2bcd8739ae039)(scheduledDate);
        return this.reserveGroup(groupId, scheduledDate);
    }
    /**
   * 그룹 생성
   */ async createGroup(allowDuplicates, appId) {
        allowDuplicates = allowDuplicates ?? false;
        const { sdkVersion: sdkVersion , osPlatform: osPlatform  } = (0, $b9b6e352f4e0d604$export$fb47e5c0b633ea53);
        const requestConfig = {
            method: "POST",
            url: `${this.baseUrl}/messages/v4/groups`
        };
        return (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig, {
            sdkVersion: sdkVersion,
            osPlatform: osPlatform,
            allowDuplicates: allowDuplicates,
            appId: appId
        }).then((res)=>res.groupId);
    }
    /**
   * 그룹 메시지 추가
   * 한번 요청으로 최대 10,000건의 메시지를 추가할 수 있습니다.
   * @param groupId 생성 된 Group ID
   * @param messages 여러 메시지(문자, 알림톡 등)
   */ async addMessagesToGroup(groupId, messages) {
        const requestConfig = {
            method: "PUT",
            url: `${this.baseUrl}/messages/v4/groups/${groupId}/messages`
        };
        return (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig, new (0, $b9b6e352f4e0d604$export$6ba9c27a351bdec2)(messages));
    }
    /**
   * 그룹 메시지 전송 요청
   * @param groupId 생성 된 Group ID
   */ async sendGroup(groupId) {
        const requestConfig = {
            method: "POST",
            url: `${this.baseUrl}/messages/v4/groups/${groupId}/send`
        };
        return (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig);
    }
    /**
   * 그룹 예약 발송 설정
   * @param groupId 생성 된 Group ID
   * @param scheduledDate 예약발송 할 날짜
   */ async reserveGroup(groupId, scheduledDate) {
        const requestConfig = {
            method: "POST",
            url: `${this.baseUrl}/messages/v4/groups/${groupId}/schedule`
        };
        const formattedScheduledDate = (0, $5FUN9$datefns.formatISO)(scheduledDate);
        return (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig, {
            scheduledDate: formattedScheduledDate
        });
    }
    /**
   * 단일 그룹정보 조회
   * @param groupId 그룹 ID
   */ async getGroup(groupId) {
        const requestConfig = {
            method: "GET",
            url: `${this.baseUrl}/messages/v4/groups/${groupId}`
        };
        return (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig);
    }
    /**
   * 그룹 목록 정보 조회
   * @param data 그룹 정보 상세 조회용 request 데이터
   */ async getGroups(data) {
        let payload = {};
        if (data) payload = new (0, $f6c35c8294c692a6$export$7d6fa05e85a55793)(data);
        const parameter = (0, ($parcel$interopDefault($5FUN9$qs))).stringify(payload, {
            indices: false,
            addQueryPrefix: true
        });
        const endpoint = `${this.baseUrl}/messages/v4/groups${parameter}`;
        const requestConfig = {
            method: "GET",
            url: endpoint
        };
        return (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig);
    }
    /**
   * 그룹 내 메시지 목록 조회
   * @param groupId 생성 된 Group ID
   * @param data startkey, limit 등 쿼리 조건 파라미터
   */ async getGroupMessages(groupId, data) {
        const parameter = (0, ($parcel$interopDefault($5FUN9$qs))).stringify(data, {
            indices: false,
            addQueryPrefix: true
        });
        const endpoint = `${this.baseUrl}/messages/v4/groups/${groupId}/messages${parameter}`;
        const requestConfig = {
            method: "GET",
            url: endpoint
        };
        return (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig);
    }
    /**
   * 그룹 내 특정 메시지 삭제
   * @param groupId 생성 된 Group Id
   * @param messageIds 생성 된 메시지 ID 목록
   */ async removeGroupMessages(groupId, messageIds) {
        const requestConfig = {
            method: "DELETE",
            url: `${this.baseUrl}/messages/v4/groups/${groupId}/messages`
        };
        return (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig, {
            messageIds: messageIds
        });
    }
    /**
   * 그룹 내 예약 발송 취소(메시지 실패 전체 처리 됨)
   * @param groupId 생성 된 Group ID
   */ async removeReservationToGroup(groupId) {
        const requestConfig = {
            method: "DELETE",
            url: `${this.baseUrl}/messages/v4/groups/${groupId}/schedule`
        };
        return (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig);
    }
    /**
   * 그룹 삭제
   * @param groupId
   */ async removeGroup(groupId) {
        const requestConfig = {
            method: "DELETE",
            url: `${this.baseUrl}/messages/v4/groups/${groupId}`
        };
        return (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig);
    }
    /**
   * 메시지 목록 조회
   * @param data 목록 조회 상세조건 파라미터
   */ async getMessages(data) {
        let payload = {};
        if (data) payload = new (0, $6aab6be99076a59a$export$18a889443adf01a3)(data);
        const parameter = (0, ($parcel$interopDefault($5FUN9$qs))).stringify(payload, {
            indices: false,
            addQueryPrefix: true
        });
        const endpoint = `${this.baseUrl}/messages/v4/list${parameter}`;
        const requestConfig = {
            method: "GET",
            url: endpoint
        };
        return (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig);
    }
    /**
   * 통계 조회
   * @param data 통계 상세 조건 파라미터
   * @returns GetStatisticsResponse 통계 결과
   */ async getStatistics(data) {
        let payload = {};
        if (data) payload = new (0, $4a43a7da4ef4b972$export$bc0a97822f19395c)(data);
        const parameter = (0, ($parcel$interopDefault($5FUN9$qs))).stringify(payload, {
            indices: false,
            addQueryPrefix: true
        });
        const endpoint = `${this.baseUrl}/messages/v4/statistics${parameter}`;
        const requestConfig = {
            method: "GET",
            url: endpoint
        };
        return (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig);
    }
    /**
   * 잔액조회
   * @returns GetBalanceResponse
   */ async getBalance() {
        const requestConfig = {
            method: "GET",
            url: `${this.baseUrl}/cash/v1/balance`
        };
        const response = await (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig);
        return {
            balance: response.balance,
            point: response.point
        };
    }
    /**
   * 파일(이미지) 업로드
   * 카카오 친구톡 이미지는 500kb, MMS는 200kb, 발신번호 서류 인증용 파일은 2mb의 제한이 있음
   * @param filePath 해당 파일의 경로 또는 접근 가능한 이미지 URL
   * @param fileType 저장할 파일의 유형, 예) 카카오 친구톡 용 이미지 -> KAKAO, MMS용 사진 -> MMS, 발신번호 서류 인증에 쓰이는 문서 등 -> DOCUMENT, RCS 이미지 -> RCS
   * @param name 파일 이름
   * @param link 파일 링크, 친구톡의 경우 필수 값
   */ async uploadFile(filePath, fileType, name, link) {
        const encodedFile = await (0, ($parcel$interopDefault($5FUN9$imagetobase64)))(filePath);
        const requestConfig = {
            method: "POST",
            url: `${this.baseUrl}/storage/v1/files`
        };
        const parameter = {
            file: encodedFile,
            type: fileType,
            name: name,
            link: link
        };
        return (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig, parameter);
    }
    /**
   * 카카오 채널 카테고리 조회
   */ async getKakaoChannelCategories() {
        const requestConfig = {
            method: "GET",
            url: `${this.baseUrl}/kakao/v2/channels/categories`
        };
        return (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig);
    }
    /**
   * 카카오 채널 목록 조회
   * @param data 카카오 채널 목록을 더 자세하게 조회할 때 필요한 파라미터
   */ async getKakaoChannels(data) {
        let payload = {};
        if (data) payload = new (0, $7403f26b0f86516f$export$28223677cbfc90e7)(data);
        const parameter = (0, ($parcel$interopDefault($5FUN9$qs))).stringify(payload, {
            indices: false
        });
        const endpoint = `${this.baseUrl}/kakao/v2/channels?${parameter}`;
        const requestConfig = {
            method: "GET",
            url: endpoint
        };
        const response = await (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig);
        const channelList = new Array();
        for (const channel of response.channelList)channelList.push(new (0, $b6870838bb73d86c$export$4ec3af33017d2d92)(channel));
        return {
            limit: response.limit,
            nextKey: response.nextKey,
            startKey: response.startKey,
            channelList: channelList
        };
    }
    /**
   * @description 카카오 채널 조회
   * @param channelId 카카오 채널 ID(구 pfId)
   */ async getKakaoChannel(channelId) {
        const requestConfig = {
            method: "GET",
            url: `${this.baseUrl}/kakao/v2/channels/${channelId}`
        };
        const response = await (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig);
        return new (0, $b6870838bb73d86c$export$4ec3af33017d2d92)(response);
    }
    /**
   * @description 카카오 채널 연동을 위한 인증 토큰 요청
   */ async requestKakaoChannelToken(data) {
        const requestConfig = {
            method: "POST",
            url: `${this.baseUrl}/kakao/v2/channels/token`
        };
        return (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig, data);
    }
    /**
   * @description 카카오 채널 연동 메소드
   * getKakaoChannelCategories, requestKakaoChannelToken 메소드를 선행적으로 호출해야 합니다!
   */ async createKakaoChannel(data) {
        const requestConfig = {
            method: "POST",
            url: `${this.baseUrl}/kakao/v2/channels`
        };
        return (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig, data);
    }
    /**
   * @description 카카오 채널 삭제, 채널이 삭제 될 경우 해당 채널의 템플릿이 모두 삭제됩니다!
   * @param channelId 카카오 채널 ID
   */ async removeKakaoChannel(channelId) {
        const requestConfig = {
            method: "DELETE",
            url: `${this.baseUrl}/kakao/v2/channels/${channelId}`
        };
        return (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig);
    }
    /**
   * 카카오 템플릿 목록 조회
   * @param data 카카오 템플릿 목록을 더 자세하게 조회할 때 필요한 파라미터
   */ async getKakaoAlimtalkTemplates(data) {
        let payload = {};
        if (data) payload = new (0, $8533ad40ed88286b$export$91fde5f4988e5a2)(data);
        const parameter = (0, ($parcel$interopDefault($5FUN9$qs))).stringify(payload, {
            indices: false
        });
        const endpoint = `${this.baseUrl}/kakao/v2/templates?${parameter}`;
        const requestConfig = {
            method: "GET",
            url: endpoint
        };
        const response = await (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig);
        const templateList = new Array();
        for (const template of response.templateList)templateList.push(new (0, $96a02860c6ad123b$export$16a18a4d633c3913)(template));
        return {
            limit: response.limit,
            nextKey: response.nextKey,
            startKey: response.startKey,
            templateList: templateList
        };
    }
    /**
   * 카카오 템플릿 상세 조회
   * @param templateId 카카오 알림톡 템플릿 ID
   */ async getKakaoAlimtalkTemplate(templateId) {
        const requestConfig = {
            method: "GET",
            url: `${this.baseUrl}/kakao/v2/templates/${templateId}`
        };
        const response = await (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig);
        return new (0, $96a02860c6ad123b$export$16a18a4d633c3913)(response);
    }
    /**
   * 카카오 템플릿 카테고리 조회
   */ async getKakaoAlimtalkTemplateCategories() {
        const requestConfig = {
            method: "GET",
            url: `${this.baseUrl}/kakao/v2/templates/categories`
        };
        return (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig);
    }
    /**
   * @description 카카오 알림톡 템플릿 생성
   * 반드시 getKakaoAlimtalkTemplateCategories를 먼저 호출하여 카테고리 값을 확인해야 합니다!
   * @param data 알림톡 템플릿 생성을 위한 파라미터
   */ async createKakaoAlimtalkTemplate(data) {
        const requestConfig = {
            method: "POST",
            url: `${this.baseUrl}/kakao/v2/templates`
        };
        const response = await (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig, data);
        return new (0, $96a02860c6ad123b$export$16a18a4d633c3913)(response);
    }
    /**
   * 카카오 알림톡 템플릿 검수 요청
   * @param templateId 카카오 알림톡 템플릿 ID
   */ async requestInspectionKakaoAlimtalkTemplate(templateId) {
        const requestConfig = {
            method: "PUT",
            url: `${this.baseUrl}/kakao/v2/templates/${templateId}/inspection`
        };
        const response = await (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig);
        return new (0, $96a02860c6ad123b$export$16a18a4d633c3913)(response);
    }
    /**
   * 카카오 알림톡 템플릿 검수 취소 요청
   * @param templateId 카카오 알림톡 템플릿 ID
   */ async cancelInspectionKakaoAlimtalkTemplate(templateId) {
        const requestConfig = {
            method: "PUT",
            url: `${this.baseUrl}/kakao/v2/templates/${templateId}/inspection/cancel`
        };
        const response = await (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig);
        return new (0, $96a02860c6ad123b$export$16a18a4d633c3913)(response);
    }
    /**
   * 카카오 알림톡 템플릿 수정(검수 X)
   * @param templateId 카카오 알림톡 템플릿 ID
   * @param data 카카오 알림톡 템플릿 수정을 위한 파라미터
   */ async updateKakaoAlimtalkTemplate(templateId, data) {
        const requestConfig = {
            method: "PUT",
            url: `${this.baseUrl}/kakao/v2/templates/${templateId}`
        };
        const response = await (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig, data);
        return new (0, $96a02860c6ad123b$export$16a18a4d633c3913)(response);
    }
    /**
   * 카카오 알림톡 템플릿 이름 수정(검수 상태 상관없이 변경가능)
   * @param templateId 카카오 알림톡 템플릿 ID
   * @param name 카카오 알림톡 템플릿 이름 변경을 위한 파라미터
   */ async updateKakaoAlimtalkTemplateName(templateId, name) {
        const requestConfig = {
            method: "PUT",
            url: `${this.baseUrl}/kakao/v2/templates/${templateId}/name`
        };
        const response = await (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig, {
            name: name
        });
        return new (0, $96a02860c6ad123b$export$16a18a4d633c3913)(response);
    }
    /**
   * @deprecated 해당 메소드는 더이상 사용되지 않습니다. removeKakaoAlimtalkTemplate를 이용해주세요!
   * 카카오 알림톡 템플릿 삭제(대기, 반려 상태일 때만 삭제가능)
   * @param templateId 카카오 알림톡 템플릿 ID
   */ async deleteKakaoAlimtalkTemplate(templateId) {
        return this.removeKakaoAlimtalkTemplate(templateId);
    }
    /**
   * 카카오 알림톡 템플릿 삭제(대기, 반려 상태일 때만 삭제가능)
   * @param templateId 카카오 알림톡 템플릿 ID
   */ async removeKakaoAlimtalkTemplate(templateId) {
        const requestConfig = {
            method: "DELETE",
            url: `${this.baseUrl}/kakao/v2/templates/${templateId}`
        };
        const response = await (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig);
        return new (0, $96a02860c6ad123b$export$16a18a4d633c3913)(response);
    }
    /**
   * 080 수신 거부 조회
   * @param data 080 수신 거부 상세 조회용 request 데이터
   * @returns GetBlacksResponse
   */ async getBlacks(data) {
        let payload = {
            type: "DENIAL"
        };
        if (data) payload = new (0, $3ec13590852c9697$export$a03fd6f891b485aa)(data);
        const parameter = (0, ($parcel$interopDefault($5FUN9$qs))).stringify(payload, {
            indices: false,
            addQueryPrefix: true
        });
        const endpoint = `${this.baseUrl}/iam/v1/black${parameter}`;
        const requestConfig = {
            method: "GET",
            url: endpoint
        };
        return (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig);
    }
    /**
   * 수신 거부 그룹 조회
   * @param data 수신 거부 그룹 조회용 request 데이터
   * @returns GetBlockGroupsResponse
   */ async getBlockGroups(data) {
        let payload = {};
        if (data) payload = new (0, $084b4157301e052b$export$e63e46a11fc5d3c)(data);
        const parameter = (0, ($parcel$interopDefault($5FUN9$qs))).stringify(payload, {
            indices: false,
            addQueryPrefix: true
        });
        const endpoint = `${this.baseUrl}/iam/v1/block/groups${parameter}`;
        const requestConfig = {
            method: "GET",
            url: endpoint
        };
        return (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig);
    }
    /**
   * 수신 차단 그룹 별 수신번호 조회
   * @param data 수신 거부 그룹 별 수신번호 조회용 request 데이터
   * @returns GetBlockNumbersResponse
   */ async getBlockNumbers(data) {
        let payload = {};
        if (data) payload = new (0, $5f21752666d363fb$export$df706d57151d1b78)(data);
        const parameter = (0, ($parcel$interopDefault($5FUN9$qs))).stringify(payload, {
            indices: false,
            addQueryPrefix: true
        });
        const endpoint = `${this.baseUrl}/iam/v1/block/numbers${parameter}`;
        const requestConfig = {
            method: "GET",
            url: endpoint
        };
        return (0, $ad28ebdd1a896f5e$export$2e2bcd8739ae039)(this.authInfo, requestConfig);
    }
}
$parcel$exportWildcard(module.exports, $091ca2771f174553$exports);


